diff --git a/shell_integration/dolphin/CMakeLists.txt b/shell_integration/dolphin/CMakeLists.txt
index 1642c80d7..caa2689b7 100644
--- a/shell_integration/dolphin/CMakeLists.txt
+++ b/shell_integration/dolphin/CMakeLists.txt
@@ -2,7 +2,7 @@ project(dolphin-owncloud)
 
 cmake_minimum_required(VERSION 3.16)
 
-set(QT_MIN_VERSION "5.15.0")
+set(QT_MIN_VERSION "5.12.0")
 set(KF5_MIN_VERSION "5.16.0")
 set(KDE_INSTALL_USE_QT_SYS_PATHS ON CACHE BOOL "Install the plugin in the right directory")
 
diff --git a/shell_integration/libcloudproviders/CMakeLists.txt b/shell_integration/libcloudproviders/CMakeLists.txt
index d5391a7a4..1dd464d25 100644
--- a/shell_integration/libcloudproviders/CMakeLists.txt
+++ b/shell_integration/libcloudproviders/CMakeLists.txt
@@ -41,7 +41,7 @@ macro(libcloudproviders_add_config _sources)
 endmacro(libcloudproviders_add_config _sources)
 
 
-find_package(Qt5 5.15 COMPONENTS DBus)
+find_package(Qt5 5.12 COMPONENTS DBus)
 IF (Qt5DBus_FOUND)
     STRING(TOLOWER "${APPLICATION_VENDOR}" DBUS_VENDOR)
     STRING(REGEX REPLACE "[^A-z0-9]" "" DBUS_VENDOR "${DBUS_VENDOR}")
diff --git a/src/3rdparty/kirigami/wheelhandler.cpp b/src/3rdparty/kirigami/wheelhandler.cpp
index ce21e51ac..cc08643c3 100644
--- a/src/3rdparty/kirigami/wheelhandler.cpp
+++ b/src/3rdparty/kirigami/wheelhandler.cpp
@@ -189,8 +189,8 @@ KirigamiWheelEvent::~KirigamiWheelEvent() = default;
 
 void KirigamiWheelEvent::initializeFromEvent(QWheelEvent *event)
 {
-    m_x = event->position().x();
-    m_y = event->position().y();
+    m_x = event->x();
+    m_y = event->y();
     m_angleDelta = event->angleDelta();
     m_pixelDelta = event->pixelDelta();
     m_buttons = event->buttons();
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index cd3805799..cc03c8585 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -4,8 +4,8 @@ endif()
 
 include(ECMEnableSanitizers)
 
-find_package(Qt5 5.15 COMPONENTS Core Network Xml Concurrent REQUIRED)
-find_package(Qt5 5.15 COMPONENTS WebEngineWidgets WebEngine)
+find_package(Qt5 5.12 COMPONENTS Core Network Xml Concurrent REQUIRED)
+find_package(Qt5 5.12 COMPONENTS WebEngineWidgets WebEngine)
 
 if(Qt5WebEngine_FOUND AND Qt5WebEngineWidgets_FOUND)
   add_compile_definitions(WITH_WEBENGINE=1)
diff --git a/src/cmd/cmd.cpp b/src/cmd/cmd.cpp
index 098f5f412..267071c63 100644
--- a/src/cmd/cmd.cpp
+++ b/src/cmd/cmd.cpp
@@ -24,6 +24,7 @@
 #include <QJsonDocument>
 #include <QJsonObject>
 #include <QNetworkProxy>
+#include <QRegularExpression>
 #include <qdebug.h>
 
 #include "account.h"
@@ -296,9 +297,9 @@ void selectiveSyncFixup(OCC::SyncJournalDb *journal, const QStringList &newList)
     bool ok = false;
 
     const auto selectiveSyncList = journal->getSelectiveSyncList(SyncJournalDb::SelectiveSyncBlackList, &ok);
-    const QSet<QString> oldBlackListSet(selectiveSyncList.begin(), selectiveSyncList.end());
+    const QSet<QString> oldBlackListSet = selectiveSyncList.toSet();
     if (ok) {
-        const QSet<QString> blackListSet(newList.begin(), newList.end());
+        const QSet<QString> blackListSet = newList.toSet();
         const auto changes = (oldBlackListSet - blackListSet) + (blackListSet - oldBlackListSet);
         for (const auto &it : changes) {
             journal->schedulePathForRemoteDiscovery(it);
diff --git a/src/common/syncjournaldb.cpp b/src/common/syncjournaldb.cpp
index b5e4f97ca..dec63f2dd 100644
--- a/src/common/syncjournaldb.cpp
+++ b/src/common/syncjournaldb.cpp
@@ -101,6 +101,7 @@ static QByteArray defaultJournalMode(const QString &dbPath)
 SyncJournalDb::SyncJournalDb(const QString &dbFilePath, QObject *parent)
     : QObject(parent)
     , _dbFile(dbFilePath)
+    , _mutex(QMutex::Recursive)
     , _transaction(0)
     , _metadataTableIsEmpty(false)
 {
diff --git a/src/common/syncjournaldb.h b/src/common/syncjournaldb.h
index d51919f49..967eb8dd7 100644
--- a/src/common/syncjournaldb.h
+++ b/src/common/syncjournaldb.h
@@ -392,7 +392,7 @@ private:
 
     SqlDatabase _db;
     QString _dbFile;
-    QRecursiveMutex _mutex; // Public functions are protected with the mutex.
+    QMutex _mutex; // Public functions are protected with the mutex.
     QMap<QByteArray, int> _checksymTypeCache;
     int _transaction;
     bool _metadataTableIsEmpty;
diff --git a/src/common/utility_unix.cpp b/src/common/utility_unix.cpp
index 887213f09..8b3f1d1b9 100644
--- a/src/common/utility_unix.cpp
+++ b/src/common/utility_unix.cpp
@@ -95,7 +95,7 @@ void setLaunchOnStartup_private(const QString &appName, const QString &guiName,
            << QLatin1String("Type=") << QLatin1String("Application\n")
            << QLatin1String("StartupNotify=") << "false\n"
            << QLatin1String("X-GNOME-Autostart-enabled=") << "true\n"
-           << QLatin1String("X-GNOME-Autostart-Delay=10") << Qt::endl;
+           << QLatin1String("X-GNOME-Autostart-Delay=10") << endl;
     } else {
         if (!QFile::remove(desktopFileLocation)) {
             qCWarning(lcUtility) << "Could not remove autostart desktop file";
diff --git a/src/gui/CMakeLists.txt b/src/gui/CMakeLists.txt
index e2a817aa5..8dfe3b2ed 100644
--- a/src/gui/CMakeLists.txt
+++ b/src/gui/CMakeLists.txt
@@ -60,7 +60,7 @@ set(client_UI_SRCS
 if(QUICK_COMPILER)
     qtquick_compiler_add_resources(client_UI_SRCS ../../resources.qrc ${CMAKE_SOURCE_DIR}/theme.qrc)
 else()
-    qt_add_resources(client_UI_SRCS ../../resources.qrc ${CMAKE_SOURCE_DIR}/theme.qrc)
+    qt5_add_resources(client_UI_SRCS ../../resources.qrc ${CMAKE_SOURCE_DIR}/theme.qrc)
 endif()
 
 set(client_SRCS
diff --git a/src/gui/creds/oauth.cpp b/src/gui/creds/oauth.cpp
index 39534fa48..e1474bab1 100644
--- a/src/gui/creds/oauth.cpp
+++ b/src/gui/creds/oauth.cpp
@@ -20,6 +20,7 @@
 #include "creds/oauth.h"
 #include <QJsonObject>
 #include <QJsonDocument>
+#include <QRegularExpression>
 #include "theme.h"
 #include "networkjobs.h"
 #include "creds/httpcredentials.h"
diff --git a/src/gui/iconutils.cpp b/src/gui/iconutils.cpp
index 40ad051ce..f29339496 100644
--- a/src/gui/iconutils.cpp
+++ b/src/gui/iconutils.cpp
@@ -53,8 +53,7 @@ QPixmap pixmapForBackground(const QString &fileName, const QColor &backgroundCol
     Q_ASSERT(!fileName.isEmpty());
 
     const auto pixmapColor = backgroundColor.isValid() && !Theme::isDarkColor(backgroundColor)
-        ? QColorConstants::Svg::black
-        : QColorConstants::Svg::white;
+        ? QRgb(0x000000) : QRgb(0xffffff);
     ;
     return createSvgPixmapWithCustomColorCached(fileName, pixmapColor);
 }
diff --git a/src/gui/internallinkwidget.h b/src/gui/internallinkwidget.h
index cb343a11e..4593636d8 100644
--- a/src/gui/internallinkwidget.h
+++ b/src/gui/internallinkwidget.h
@@ -21,6 +21,8 @@
 
 #include "ui_internallinkwidget.h"
 
+#include <memory>
+
 namespace OCC {
 
 /**
diff --git a/src/gui/notificationconfirmjob.cpp b/src/gui/notificationconfirmjob.cpp
index 09e147da3..760d8869b 100644
--- a/src/gui/notificationconfirmjob.cpp
+++ b/src/gui/notificationconfirmjob.cpp
@@ -17,6 +17,7 @@
 #include "account.h"
 
 #include <QBuffer>
+#include <QRegularExpression>
 
 namespace OCC {
 
diff --git a/src/gui/passwordinputdialog.h b/src/gui/passwordinputdialog.h
index 50528a252..9df1a76f9 100644
--- a/src/gui/passwordinputdialog.h
+++ b/src/gui/passwordinputdialog.h
@@ -15,6 +15,7 @@
 #pragma once
 
 #include <QDialog>
+#include <memory>
 
 namespace OCC {
 
diff --git a/src/gui/sharedialog.cpp b/src/gui/sharedialog.cpp
index 99a0b8356..1d97f289c 100644
--- a/src/gui/sharedialog.cpp
+++ b/src/gui/sharedialog.cpp
@@ -35,6 +35,7 @@
 #include <QPointer>
 #include <QPushButton>
 #include <QFrame>
+#include <QRegularExpression>
 #include <QScrollBar>
 
 namespace {
diff --git a/src/gui/tray/asyncimageresponse.cpp b/src/gui/tray/asyncimageresponse.cpp
index f393c837a..5f1acdc20 100644
--- a/src/gui/tray/asyncimageresponse.cpp
+++ b/src/gui/tray/asyncimageresponse.cpp
@@ -27,7 +27,7 @@ AsyncImageResponse::AsyncImageResponse(const QString &id, const QSize &requested
     }
 
     auto actualId = id;
-    const auto idSplit = id.split(QStringLiteral("/"), Qt::SkipEmptyParts);
+    const auto idSplit = id.split(QStringLiteral("/"), QString::SkipEmptyParts);
     const auto color = QColor(idSplit.last());
 
     if(color.isValid()) {
@@ -35,7 +35,7 @@ AsyncImageResponse::AsyncImageResponse(const QString &id, const QSize &requested
         actualId.remove("/" % idSplit.last());
     }
 
-    _imagePaths = actualId.split(QLatin1Char(';'), Qt::SkipEmptyParts);
+    _imagePaths = actualId.split(QLatin1Char(';'), QString::SkipEmptyParts);
     _requestedImageSize = requestedSize;
 
     if (_imagePaths.isEmpty()) {
diff --git a/src/gui/tray/svgimageprovider.cpp b/src/gui/tray/svgimageprovider.cpp
index ab5760700..e993970ac 100644
--- a/src/gui/tray/svgimageprovider.cpp
+++ b/src/gui/tray/svgimageprovider.cpp
@@ -30,7 +30,7 @@ namespace Ui {
     {
         Q_ASSERT(!id.isEmpty());
 
-        const auto idSplit = id.split(QStringLiteral("/"), Qt::SkipEmptyParts);
+        const auto idSplit = id.split(QStringLiteral("/"), QString::SkipEmptyParts);
 
         if (idSplit.isEmpty()) {
             qCWarning(lcSvgImageProvider) << "Image id is incorrect!";
@@ -38,7 +38,7 @@ namespace Ui {
         }
 
         const auto pixmapName = idSplit.at(0);
-        const auto pixmapColor = idSplit.size() > 1 ? QColor(idSplit.at(1)) : QColorConstants::Svg::black;
+        const auto pixmapColor = idSplit.size() > 1 ? QColor(idSplit.at(1)) : QRgb(0x000000);
 
         if (pixmapName.isEmpty() || !pixmapColor.isValid()) {
             qCWarning(lcSvgImageProvider) << "Image id is incorrect!";
diff --git a/src/gui/tray/talkreply.cpp b/src/gui/tray/talkreply.cpp
index 4819801cf..83def86b4 100644
--- a/src/gui/tray/talkreply.cpp
+++ b/src/gui/tray/talkreply.cpp
@@ -19,7 +19,7 @@ TalkReply::TalkReply(AccountState *accountState, QObject *parent)
 void TalkReply::sendReplyMessage(const QString &conversationToken, const QString &message, const QString &replyTo)
 {
     QPointer<JsonApiJob> apiJob =  new JsonApiJob(_accountState->account(),
-        QLatin1String("ocs/v2.php/apps/spreed/api/v1/chat/%1").arg(conversationToken),
+        QLatin1String(QString("ocs/v2.php/apps/spreed/api/v1/chat/%1").arg(conversationToken).toLatin1()),
         this);
 
     QObject::connect(apiJob, &JsonApiJob::jsonReceived, this, [&](const QJsonDocument &response, const int statusCode) {
diff --git a/src/gui/tray/unifiedsearchresultslistmodel.cpp b/src/gui/tray/unifiedsearchresultslistmodel.cpp
index 7d5cd95db..50eee4a2e 100644
--- a/src/gui/tray/unifiedsearchresultslistmodel.cpp
+++ b/src/gui/tray/unifiedsearchresultslistmodel.cpp
@@ -114,7 +114,7 @@ QString generateUrlForThumbnail(const QString &thumbnailUrl, const QUrl &serverU
         // relative image resource URL, just needs some concatenation with current server URL
         // some icons may contain parameters after (?)
         const QStringList thumbnailUrlCopySplitted = thumbnailUrlCopy.contains(QLatin1Char('?'))
-            ? thumbnailUrlCopy.split(QLatin1Char('?'), Qt::SkipEmptyParts)
+            ? thumbnailUrlCopy.split(QLatin1Char('?'), QString::SkipEmptyParts)
             : QStringList{thumbnailUrlCopy};
         Q_ASSERT(!thumbnailUrlCopySplitted.isEmpty());
         serverUrlCopy.setPath(thumbnailUrlCopySplitted[0]);
@@ -498,7 +498,7 @@ void UnifiedSearchResultsListModel::startSearchForProvider(const QString &provid
     }
 
     auto job = new JsonApiJob(_accountState->account(),
-        QLatin1String("ocs/v2.php/search/providers/%1/search").arg(providerId));
+                              QLatin1String(QString("ocs/v2.php/search/providers/%1/search").arg(providerId).toLatin1()));
 
     QUrlQuery params;
     params.addQueryItem(QStringLiteral("term"), _searchTerm);
diff --git a/src/gui/userstatusselectormodel.h b/src/gui/userstatusselectormodel.h
index 9d7e39364..a29392437 100644
--- a/src/gui/userstatusselectormodel.h
+++ b/src/gui/userstatusselectormodel.h
@@ -23,6 +23,7 @@
 #include <QObject>
 #include <QMetaType>
 #include <QtNumeric>
+#include <QVector>
 
 #include <cstddef>
 #include <memory>
diff --git a/src/gui/wizard/webview.cpp b/src/gui/wizard/webview.cpp
index 0ecaca08c..d137a80d6 100644
--- a/src/gui/wizard/webview.cpp
+++ b/src/gui/wizard/webview.cpp
@@ -30,6 +30,8 @@ class WebViewPageUrlRequestInterceptor : public QWebEngineUrlRequestInterceptor
 public:
     WebViewPageUrlRequestInterceptor(QObject *parent = nullptr);
     void interceptRequest(QWebEngineUrlRequestInfo &info) override;
+private:
+    int numInterceptedRequests = 0;
 };
 
 class WebViewPageUrlSchemeHandler : public QWebEngineUrlSchemeHandler
@@ -136,10 +138,11 @@ WebViewPageUrlRequestInterceptor::WebViewPageUrlRequestInterceptor(QObject *pare
 }
 
 void WebViewPageUrlRequestInterceptor::interceptRequest(QWebEngineUrlRequestInfo &info) {
-    if (info.initiator().isEmpty()) {
+    if (numInterceptedRequests==0) {
         info.setHttpHeader("OCS-APIREQUEST", "true");
         qCDebug(lcWizardWebiew()) << info.requestMethod() << "add extra header" << "OCS-APIREQUEST";
     }
+    ++numInterceptedRequests;
 }
 
 WebViewPageUrlSchemeHandler::WebViewPageUrlSchemeHandler(QObject *parent)
diff --git a/src/libsync/account.cpp b/src/libsync/account.cpp
index fa874386b..839a28d7e 100644
--- a/src/libsync/account.cpp
+++ b/src/libsync/account.cpp
@@ -51,7 +51,6 @@
 #include <QLoggingCategory>
 #include <QHttpMultiPart>
 
-#include <qsslconfiguration.h>
 #include <qt5keychain/keychain.h>
 #include "creds/abstractcredentials.h"
 
@@ -440,7 +439,7 @@ QSslConfiguration Account::getOrCreateSslConfig()
     sslConfig.setSslOption(QSsl::SslOptionDisableSessionSharing, false);
     sslConfig.setSslOption(QSsl::SslOptionDisableSessionPersistence, false);
 
-    sslConfig.setOcspStaplingEnabled(Theme::instance()->enableStaplingOCSP());
+    assert(!Theme::instance()->enableStaplingOCSP());
 
     return sslConfig;
 }
@@ -448,7 +447,7 @@ QSslConfiguration Account::getOrCreateSslConfig()
 void Account::setApprovedCerts(const QList<QSslCertificate> certs)
 {
     _approvedCerts = certs;
-    QSslConfiguration::defaultConfiguration().addCaCertificates(certs);
+    QSslSocket::addDefaultCaCertificates(certs);
 }
 
 void Account::addApprovedCerts(const QList<QSslCertificate> certs)
@@ -543,7 +542,7 @@ void Account::slotHandleSslErrors(QNetworkReply *reply, QList<QSslError> errors)
             return;
 
         if (!approvedCerts.isEmpty()) {
-            QSslConfiguration::defaultConfiguration().addCaCertificates(approvedCerts);
+            QSslSocket::addDefaultCaCertificates(approvedCerts);
             addApprovedCerts(approvedCerts);
             emit wantsAccountSaved(this);
 
diff --git a/src/libsync/discoveryphase.h b/src/libsync/discoveryphase.h
index f4bb42704..6461b7bfd 100644
--- a/src/libsync/discoveryphase.h
+++ b/src/libsync/discoveryphase.h
@@ -24,6 +24,7 @@
 #include <QMutex>
 #include <QWaitCondition>
 #include <QRunnable>
+#include <QRegularExpression>
 #include <deque>
 #include "syncoptions.h"
 #include "syncfileitem.h"
diff --git a/src/libsync/logger.cpp b/src/libsync/logger.cpp
index 294ad2bb6..8bd85f19e 100644
--- a/src/libsync/logger.cpp
+++ b/src/libsync/logger.cpp
@@ -118,7 +118,7 @@ void Logger::doLog(QtMsgType type, const QMessageLogContext &ctx, const QString
         _crashLogIndex = (_crashLogIndex + 1) % CrashLogSize;
         _crashLog[_crashLogIndex] = msg;
         if (_logstream) {
-            (*_logstream) << msg << Qt::endl;
+            (*_logstream) << msg << endl;
             if (_doFileFlush)
                 _logstream->flush();
         }
diff --git a/src/libsync/networkjobs.cpp b/src/libsync/networkjobs.cpp
index 335dd1eb5..06289c291 100644
--- a/src/libsync/networkjobs.cpp
+++ b/src/libsync/networkjobs.cpp
@@ -30,6 +30,7 @@
 #include <QCoreApplication>
 #include <QJsonDocument>
 #include <QJsonObject>
+#include <QRegularExpression>
 #include <qloggingcategory.h>
 #ifndef TOKEN_AUTH_ONLY
 #include <QPainter>
diff --git a/src/libsync/ocsuserstatusconnector.cpp b/src/libsync/ocsuserstatusconnector.cpp
index a8364d6cd..e54845661 100644
--- a/src/libsync/ocsuserstatusconnector.cpp
+++ b/src/libsync/ocsuserstatusconnector.cpp
@@ -110,10 +110,10 @@ quint64 clearAtEndOfToTimestamp(const OCC::ClearAt &clearAt)
     Q_ASSERT(clearAt._type == OCC::ClearAtType::EndOf);
 
     if (clearAt._endof == "day") {
-        return QDate::currentDate().addDays(1).startOfDay().toSecsSinceEpoch();
+        return QDateTime(QDate::currentDate().addDays(1)).toSecsSinceEpoch();
     } else if (clearAt._endof == "week") {
         const auto days = Qt::Sunday - QDate::currentDate().dayOfWeek();
-        return QDate::currentDate().addDays(days + 1).startOfDay().toSecsSinceEpoch();
+        return QDateTime(QDate::currentDate().addDays(days + 1)).toSecsSinceEpoch();
     }
     qCWarning(lcOcsUserStatusConnector) << "Can not handle clear at endof day type" << clearAt._endof;
     return QDateTime::currentDateTime().toSecsSinceEpoch();
diff --git a/src/libsync/owncloudpropagator.cpp b/src/libsync/owncloudpropagator.cpp
index 889c0dce0..47eb2493b 100644
--- a/src/libsync/owncloudpropagator.cpp
+++ b/src/libsync/owncloudpropagator.cpp
@@ -426,7 +426,7 @@ void OwncloudPropagator::adjustDeletedFoldersWithNewChildren(SyncFileItemVector
         }
 
         // #1 get root folder name for the current item that we need to reupload
-        const auto folderPathSplit = (*it)->_file.split(QLatin1Char('/'), Qt::SkipEmptyParts);
+        const auto folderPathSplit = (*it)->_file.split(QLatin1Char('/'), QString::SkipEmptyParts);
         if (folderPathSplit.isEmpty()) {
             continue;
         }
diff --git a/src/libsync/propagatedownload.cpp b/src/libsync/propagatedownload.cpp
index 57e5572de..c5fe98ecc 100644
--- a/src/libsync/propagatedownload.cpp
+++ b/src/libsync/propagatedownload.cpp
@@ -32,6 +32,7 @@
 #include <QNetworkAccessManager>
 #include <QFileInfo>
 #include <QDir>
+#include <QRegularExpression>
 #include <cmath>
 
 #ifdef Q_OS_UNIX
diff --git a/src/libsync/syncengine.cpp b/src/libsync/syncengine.cpp
index ac19cd40c..d8dc8effc 100644
--- a/src/libsync/syncengine.cpp
+++ b/src/libsync/syncengine.cpp
@@ -55,6 +55,7 @@
 #include <QProcess>
 #include <QElapsedTimer>
 #include <QFileInfo>
+#include <QRegularExpression>
 #include <qtextcodec.h>
 
 namespace OCC {
@@ -702,11 +703,7 @@ void SyncEngine::slotDiscoveryFinished()
             const QString script = qEnvironmentVariable("OWNCLOUD_POST_UPDATE_SCRIPT");
 
             qCDebug(lcEngine) << "Post Update Script: " << script;
-            auto scriptArgs = script.split(QRegularExpression("\\s+"), Qt::SkipEmptyParts);
-            if (scriptArgs.size() > 0) {
-                const auto scriptExecutable = scriptArgs.takeFirst();
-                QProcess::execute(scriptExecutable, scriptArgs);
-            }
+            QProcess::execute(script);
 #else
             qCWarning(lcEngine) << "**** Attention: POST_UPDATE_SCRIPT installed, but not executed because compiled with NDEBUG";
     #endif
diff --git a/src/libsync/syncfilestatustracker.cpp b/src/libsync/syncfilestatustracker.cpp
index 9c4ae0e8c..276bc4f8d 100644
--- a/src/libsync/syncfilestatustracker.cpp
+++ b/src/libsync/syncfilestatustracker.cpp
@@ -339,7 +339,7 @@ SyncFileStatus SyncFileStatusTracker::resolveSyncAndErrorStatus(const QString &r
 
 void SyncFileStatusTracker::invalidateParentPaths(const QString &path)
 {
-    QStringList splitPath = path.split('/', Qt::SkipEmptyParts);
+    QStringList splitPath = path.split('/', QString::SkipEmptyParts);
     for (int i = 0; i < splitPath.size(); ++i) {
         QString parentPath = QStringList(splitPath.mid(0, i)).join(QLatin1String("/"));
         emit fileStatusChanged(getSystemDestination(parentPath), fileStatus(parentPath));
diff --git a/src/libsync/theme.cpp b/src/libsync/theme.cpp
index eb2268ca2..13f4ae26c 100644
--- a/src/libsync/theme.cpp
+++ b/src/libsync/theme.cpp
@@ -765,17 +765,17 @@ QString Theme::versionSwitchOutput() const
     QTextStream stream(&helpText);
     stream << appName()
            << QLatin1String(" version ")
-           << version() << Qt::endl;
+           << version() << endl;
 #ifdef GIT_SHA1
-    stream << "Git revision " << GIT_SHA1 << Qt::endl;
+    stream << "Git revision " << GIT_SHA1 << endl;
 #endif
-    stream << "Using Qt " << qVersion() << ", built against Qt " << QT_VERSION_STR << Qt::endl;
+    stream << "Using Qt " << qVersion() << ", built against Qt " << QT_VERSION_STR << endl;
 
     if(!QGuiApplication::platformName().isEmpty())
-        stream << "Using Qt platform plugin '" << QGuiApplication::platformName() << "'" << Qt::endl;
+        stream << "Using Qt platform plugin '" << QGuiApplication::platformName() << "'" << endl;
 
-    stream << "Using '" << QSslSocket::sslLibraryVersionString() << "'" << Qt::endl;
-    stream << "Running on " << Utility::platformName() << ", " << QSysInfo::currentCpuArchitecture() << Qt::endl;
+    stream << "Using '" << QSslSocket::sslLibraryVersionString() << "'" << endl;
+    stream << "Running on " << Utility::platformName() << ", " << QSysInfo::currentCpuArchitecture() << endl;
     return helpText;
 }
 
diff --git a/test/syncenginetestutils.cpp b/test/syncenginetestutils.cpp
index 340cf82ba..3ede8090a 100644
--- a/test/syncenginetestutils.cpp
+++ b/test/syncenginetestutils.cpp
@@ -24,7 +24,7 @@ PathComponents::PathComponents(const char *path)
 }
 
 PathComponents::PathComponents(const QString &path)
-    : QStringList { path.split(QLatin1Char('/'), Qt::SkipEmptyParts) }
+    : QStringList { path.split(QLatin1Char('/'), QString::SkipEmptyParts) }
 {
 }
 
@@ -448,7 +448,7 @@ QVector<FileInfo *> FakePutMultiFileReply::performMultiPart(FileInfo &remoteRoot
     constexpr int boundaryPosition = sizeof("multipart/related; boundary=");
     const QString boundaryValue = QStringLiteral("--") + contentType.mid(boundaryPosition, contentType.length() - boundaryPosition - 1) + QStringLiteral("\r\n");
     auto stringPutPayloadRef = QString{stringPutPayload}.left(stringPutPayload.size() - 2 - boundaryValue.size());
-    auto allParts = stringPutPayloadRef.split(boundaryValue, Qt::SkipEmptyParts);
+    auto allParts = stringPutPayloadRef.split(boundaryValue, QString::SkipEmptyParts);
     for (const auto &onePart : allParts) {
         auto headerEndPosition = onePart.indexOf(QStringLiteral("\r\n\r\n"));
         auto onePartHeaderPart = onePart.left(headerEndPosition);
@@ -914,7 +914,7 @@ void FakeHangingReply::abort()
     // Follow more or less the implementation of QNetworkReplyImpl::abort
     close();
     setError(OperationCanceledError, tr("Operation canceled"));
-    emit errorOccurred(OperationCanceledError);
+    emit error(OperationCanceledError);
     setFinished(true);
     emit finished();
 }
@@ -936,7 +936,7 @@ QJsonObject FakeQNAM::forEachReplyPart(QIODevice *outgoingData,
     constexpr int boundaryPosition = sizeof("multipart/related; boundary=");
     const QString boundaryValue = QStringLiteral("--") + contentType.mid(boundaryPosition, contentType.length() - boundaryPosition - 1) + QStringLiteral("\r\n");
     auto stringPutPayloadRef = QString{stringPutPayload}.left(stringPutPayload.size() - 2 - boundaryValue.size());
-    auto allParts = stringPutPayloadRef.split(boundaryValue, Qt::SkipEmptyParts);
+    auto allParts = stringPutPayloadRef.split(boundaryValue, QString::SkipEmptyParts);
     for (const auto &onePart : qAsConst(allParts)) {
         auto headerEndPosition = onePart.indexOf(QStringLiteral("\r\n\r\n"));
         auto onePartHeaderPart = onePart.left(headerEndPosition);
diff --git a/test/testcookies.cpp b/test/testcookies.cpp
index eead47953..a5053abd9 100644
--- a/test/testcookies.cpp
+++ b/test/testcookies.cpp
@@ -21,7 +21,7 @@ private slots:
         const QString nonexistingPath = tmp.filePath("someNonexistingDir/test.db");
         QNetworkCookie cookieA = QNetworkCookie("foo", "bar");
         // tomorrow rounded
-        cookieA.setExpirationDate(QDateTime::currentDateTimeUtc().addDays(1).date().startOfDay());
+        cookieA.setExpirationDate(QDateTime(QDateTime::currentDateTimeUtc().addDays(1).date()));
         const QList<QNetworkCookie> cookies = {cookieA, QNetworkCookie("foo2", "bar")};
         CookieJar jar;
         jar.setAllCookies(cookies);
diff --git a/test/testiconutils.cpp b/test/testiconutils.cpp
index 9f16acd7f..b54ac1185 100644
--- a/test/testiconutils.cpp
+++ b/test/testiconutils.cpp
@@ -37,9 +37,9 @@ private slots:
 
         Q_ASSERT(!blackImages.isEmpty());
 
-        QVERIFY(!OCC::Ui::IconUtils::drawSvgWithCustomFillColor(blackSvgDirPath + QStringLiteral("/") + blackImages.at(0), QColorConstants::Svg::red).isNull());
+        QVERIFY(!OCC::Ui::IconUtils::drawSvgWithCustomFillColor(blackSvgDirPath + QStringLiteral("/") + blackImages.at(0), QRgb(0xff0000)).isNull());
 
-        QVERIFY(!OCC::Ui::IconUtils::drawSvgWithCustomFillColor(blackSvgDirPath + QStringLiteral("/") + blackImages.at(0), QColorConstants::Svg::green).isNull());
+        QVERIFY(!OCC::Ui::IconUtils::drawSvgWithCustomFillColor(blackSvgDirPath + QStringLiteral("/") + blackImages.at(0), QRgb(0x00ff00)).isNull());
 
         const QString whiteSvgDirPath{QString{OCC::Theme::themePrefix} + QStringLiteral("white")};
         const QDir whiteSvgDir(whiteSvgDirPath);
@@ -47,7 +47,7 @@ private slots:
 
         Q_ASSERT(!whiteImages.isEmpty());
 
-        QVERIFY(!OCC::Ui::IconUtils::drawSvgWithCustomFillColor(whiteSvgDirPath + QStringLiteral("/") + whiteImages.at(0), QColorConstants::Svg::blue).isNull());
+        QVERIFY(!OCC::Ui::IconUtils::drawSvgWithCustomFillColor(whiteSvgDirPath + QStringLiteral("/") + whiteImages.at(0), QRgb(0x0000ff)).isNull());
     }
 
     void testCreateSvgPixmapWithCustomColor()
@@ -57,16 +57,16 @@ private slots:
 
         QVERIFY(!blackImages.isEmpty());
 
-        QVERIFY(!OCC::Ui::IconUtils::createSvgImageWithCustomColor(blackImages.at(0), QColorConstants::Svg::red).isNull());
+        QVERIFY(!OCC::Ui::IconUtils::createSvgImageWithCustomColor(blackImages.at(0), QRgb(0xff0000)).isNull());
 
-        QVERIFY(!OCC::Ui::IconUtils::createSvgImageWithCustomColor(blackImages.at(0), QColorConstants::Svg::green).isNull());
+        QVERIFY(!OCC::Ui::IconUtils::createSvgImageWithCustomColor(blackImages.at(0), QRgb(0x00ff00)).isNull());
 
         const QDir whiteSvgDir(QString(QString{OCC::Theme::themePrefix}) + QStringLiteral("white"));
         const QStringList whiteImages = whiteSvgDir.entryList(QStringList("*.svg"));
         
         QVERIFY(!whiteImages.isEmpty());
 
-        QVERIFY(!OCC::Ui::IconUtils::createSvgImageWithCustomColor(whiteImages.at(0), QColorConstants::Svg::blue).isNull());
+        QVERIFY(!OCC::Ui::IconUtils::createSvgImageWithCustomColor(whiteImages.at(0), QRgb(0x0000ff)).isNull());
     }
 
     void testPixmapForBackground()
diff --git a/test/testunifiedsearchlistmodel.cpp b/test/testunifiedsearchlistmodel.cpp
index ea7de04ba..0d1b33e09 100644
--- a/test/testunifiedsearchlistmodel.cpp
+++ b/test/testunifiedsearchlistmodel.cpp
@@ -334,7 +334,7 @@ private slots:
             // handle search for provider
             } else if (path.startsWith(QStringLiteral("/ocs/v2.php/search/providers")) && !searchTerm.isEmpty()) {
                 const auto pathSplit = path.mid(QString(QStringLiteral("/ocs/v2.php/search/providers")).size())
-                                           .split(QLatin1Char('/'), Qt::SkipEmptyParts);
+                                           .split(QLatin1Char('/'), QString::SkipEmptyParts);
 
                 if (!pathSplit.isEmpty() && path.contains(pathSplit.first())) {
                     reply = new FakePayloadReply(op, req,
